// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Query$ReasonApolloHooks = require("reason-apollo-hooks/src/Query.bs.js");

require("./CharacterList.css");

var ppx_printed_query = "query CharacterList  {\ngetCharacters(sortDirection: ASC)  {\nid  \nname  \nplayedBy  \nculture  \nallegiances  {\nname  \n}\n\nisAlive  \n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "getCharacters");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeArray(value$1);
      tmp = match$2 !== undefined ? match$2.map((function (value) {
                var match = Js_json.decodeObject(value);
                if (match !== undefined) {
                  var value$1 = Caml_option.valFromOption(match);
                  var match$1 = Js_dict.get(value$1, "id");
                  var tmp;
                  if (match$1 !== undefined) {
                    var value$2 = Caml_option.valFromOption(match$1);
                    var match$2 = Js_json.decodeString(value$2);
                    tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                  } else {
                    tmp = Js_exn.raiseError("graphql_ppx: Field id on type Character is missing");
                  }
                  var match$3 = Js_dict.get(value$1, "name");
                  var tmp$1;
                  if (match$3 !== undefined) {
                    var value$3 = Caml_option.valFromOption(match$3);
                    var match$4 = Js_json.decodeString(value$3);
                    tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                  } else {
                    tmp$1 = Js_exn.raiseError("graphql_ppx: Field name on type Character is missing");
                  }
                  var match$5 = Js_dict.get(value$1, "playedBy");
                  var tmp$2;
                  if (match$5 !== undefined) {
                    var value$4 = Caml_option.valFromOption(match$5);
                    var match$6 = Js_json.decodeNull(value$4);
                    if (match$6 !== undefined) {
                      tmp$2 = undefined;
                    } else {
                      var match$7 = Js_json.decodeString(value$4);
                      tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                    }
                  } else {
                    tmp$2 = undefined;
                  }
                  var match$8 = Js_dict.get(value$1, "culture");
                  var tmp$3;
                  if (match$8 !== undefined) {
                    var value$5 = Caml_option.valFromOption(match$8);
                    var match$9 = Js_json.decodeNull(value$5);
                    if (match$9 !== undefined) {
                      tmp$3 = undefined;
                    } else {
                      var match$10 = Js_json.decodeString(value$5);
                      tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
                    }
                  } else {
                    tmp$3 = undefined;
                  }
                  var match$11 = Js_dict.get(value$1, "allegiances");
                  var tmp$4;
                  if (match$11 !== undefined) {
                    var value$6 = Caml_option.valFromOption(match$11);
                    var match$12 = Js_json.decodeNull(value$6);
                    if (match$12 !== undefined) {
                      tmp$4 = undefined;
                    } else {
                      var match$13 = Js_json.decodeArray(value$6);
                      tmp$4 = match$13 !== undefined ? match$13.map((function (value) {
                                var match = Js_json.decodeObject(value);
                                if (match !== undefined) {
                                  var match$1 = Js_dict.get(Caml_option.valFromOption(match), "name");
                                  var tmp;
                                  if (match$1 !== undefined) {
                                    var value$1 = Caml_option.valFromOption(match$1);
                                    var match$2 = Js_json.decodeString(value$1);
                                    tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$1));
                                  } else {
                                    tmp = Js_exn.raiseError("graphql_ppx: Field name on type House is missing");
                                  }
                                  return {
                                          name: tmp
                                        };
                                } else {
                                  return Js_exn.raiseError("graphql_ppx: Object is not a value");
                                }
                              })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$6));
                    }
                  } else {
                    tmp$4 = undefined;
                  }
                  var match$14 = Js_dict.get(value$1, "isAlive");
                  var tmp$5;
                  if (match$14 !== undefined) {
                    var value$7 = Caml_option.valFromOption(match$14);
                    var match$15 = Js_json.decodeBoolean(value$7);
                    tmp$5 = match$15 !== undefined ? match$15 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$7));
                  } else {
                    tmp$5 = Js_exn.raiseError("graphql_ppx: Field isAlive on type Character is missing");
                  }
                  return {
                          id: tmp,
                          name: tmp$1,
                          playedBy: tmp$2,
                          culture: tmp$3,
                          allegiances: tmp$4,
                          isAlive: tmp$5
                        };
                } else {
                  return Js_exn.raiseError("graphql_ppx: Object is not a value");
                }
              })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$1));
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field getCharacters on type Query is missing");
    }
    return {
            getCharacters: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var QueryConfig = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var CharacterListQuery = Query$ReasonApolloHooks.Make([
      ppx_printed_query,
      parse
    ]);

function TestList(Props) {
  var query = make(/* () */0);
  console.log("QUERY: ", query);
  var match = Curry._3(CharacterListQuery[/* use */0], undefined, undefined, /* () */0);
  var simple = match[0];
  var tmp;
  if (typeof simple === "number") {
    tmp = simple === 0 ? React.createElement("div", undefined, "Loading...") : React.createElement("div", undefined, "No Data...");
  } else if (simple.tag) {
    tmp = React.createElement("div", undefined, simple[0].message);
  } else {
    console.log(simple[0]);
    tmp = "Data should be in console";
  }
  return React.createElement("div", {
              className: "CharacterList"
            }, React.createElement("h2", undefined, "All Characters"), "Check Console", tmp);
}

var make$1 = TestList;

exports.QueryConfig = QueryConfig;
exports.CharacterListQuery = CharacterListQuery;
exports.make = make$1;
/*  Not a pure module */
