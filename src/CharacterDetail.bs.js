// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Query$ReasonApolloHooks = require("reason-apollo-hooks/src/Query.bs.js");

require("./CharacterDetail.css");

var ppx_printed_query = "query CharacterDetail($id: ID!)  {\ngetCharacter(characterId: $id)  {\nid  \nname  \nplayedBy  \nculture  \ntitles  \naliases  \nborn  \ndied  \n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "getCharacter");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeObject(value$1);
        var tmp$1;
        if (match$3 !== undefined) {
          var value$2 = Caml_option.valFromOption(match$3);
          var match$4 = Js_dict.get(value$2, "id");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$3 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeString(value$3);
            tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
          } else {
            tmp$2 = Js_exn.raiseError("graphql_ppx: Field id on type Character is missing");
          }
          var match$6 = Js_dict.get(value$2, "name");
          var tmp$3;
          if (match$6 !== undefined) {
            var value$4 = Caml_option.valFromOption(match$6);
            var match$7 = Js_json.decodeString(value$4);
            tmp$3 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
          } else {
            tmp$3 = Js_exn.raiseError("graphql_ppx: Field name on type Character is missing");
          }
          var match$8 = Js_dict.get(value$2, "playedBy");
          var tmp$4;
          if (match$8 !== undefined) {
            var value$5 = Caml_option.valFromOption(match$8);
            var match$9 = Js_json.decodeNull(value$5);
            if (match$9 !== undefined) {
              tmp$4 = undefined;
            } else {
              var match$10 = Js_json.decodeString(value$5);
              tmp$4 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
            }
          } else {
            tmp$4 = undefined;
          }
          var match$11 = Js_dict.get(value$2, "culture");
          var tmp$5;
          if (match$11 !== undefined) {
            var value$6 = Caml_option.valFromOption(match$11);
            var match$12 = Js_json.decodeNull(value$6);
            if (match$12 !== undefined) {
              tmp$5 = undefined;
            } else {
              var match$13 = Js_json.decodeString(value$6);
              tmp$5 = match$13 !== undefined ? match$13 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
            }
          } else {
            tmp$5 = undefined;
          }
          var match$14 = Js_dict.get(value$2, "titles");
          var tmp$6;
          if (match$14 !== undefined) {
            var value$7 = Caml_option.valFromOption(match$14);
            var match$15 = Js_json.decodeNull(value$7);
            if (match$15 !== undefined) {
              tmp$6 = undefined;
            } else {
              var match$16 = Js_json.decodeArray(value$7);
              tmp$6 = match$16 !== undefined ? match$16.map((function (value) {
                        var match = Js_json.decodeString(value);
                        if (match !== undefined) {
                          return match;
                        } else {
                          return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                        }
                      })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$7));
            }
          } else {
            tmp$6 = undefined;
          }
          var match$17 = Js_dict.get(value$2, "aliases");
          var tmp$7;
          if (match$17 !== undefined) {
            var value$8 = Caml_option.valFromOption(match$17);
            var match$18 = Js_json.decodeNull(value$8);
            if (match$18 !== undefined) {
              tmp$7 = undefined;
            } else {
              var match$19 = Js_json.decodeArray(value$8);
              tmp$7 = match$19 !== undefined ? match$19.map((function (value) {
                        var match = Js_json.decodeString(value);
                        if (match !== undefined) {
                          return match;
                        } else {
                          return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                        }
                      })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$8));
            }
          } else {
            tmp$7 = undefined;
          }
          var match$20 = Js_dict.get(value$2, "born");
          var tmp$8;
          if (match$20 !== undefined) {
            var value$9 = Caml_option.valFromOption(match$20);
            var match$21 = Js_json.decodeNull(value$9);
            if (match$21 !== undefined) {
              tmp$8 = undefined;
            } else {
              var match$22 = Js_json.decodeString(value$9);
              tmp$8 = match$22 !== undefined ? match$22 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$9));
            }
          } else {
            tmp$8 = undefined;
          }
          var match$23 = Js_dict.get(value$2, "died");
          var tmp$9;
          if (match$23 !== undefined) {
            var value$10 = Caml_option.valFromOption(match$23);
            var match$24 = Js_json.decodeNull(value$10);
            if (match$24 !== undefined) {
              tmp$9 = undefined;
            } else {
              var match$25 = Js_json.decodeString(value$10);
              tmp$9 = match$25 !== undefined ? match$25 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$10));
            }
          } else {
            tmp$9 = undefined;
          }
          tmp$1 = {
            id: tmp$2,
            name: tmp$3,
            playedBy: tmp$4,
            culture: tmp$5,
            titles: tmp$6,
            aliases: tmp$7,
            born: tmp$8,
            died: tmp$9
          };
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
        }
        tmp = Caml_option.some(tmp$1);
      }
    } else {
      tmp = undefined;
    }
    return {
            getCharacter: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(id, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var id = variables.id;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]]),
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var QueryConfig = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var CharacterDetailQuery = Query$ReasonApolloHooks.Make([
      ppx_printed_query,
      parse
    ]);

function CharacterDetail(Props) {
  var query = make("29", /* () */0);
  console.log("DETAIL_QUERY: ", query);
  var variables = query.variables;
  var match = Curry._3(CharacterDetailQuery[/* use */0], Caml_option.some(variables), undefined, /* () */0);
  var simple = match[0];
  var tmp;
  if (typeof simple === "number") {
    tmp = simple === 0 ? React.createElement("div", undefined, "Loading") : null;
  } else if (simple.tag) {
    tmp = React.createElement("div", undefined, simple[0].message);
  } else {
    var match$1 = simple[0].getCharacter;
    tmp = match$1 !== undefined ? React.createElement("p", undefined, Caml_option.valFromOption(match$1).name) : "No Character Data";
  }
  return React.createElement("div", {
              className: "CharacterDetail"
            }, tmp);
}

var make$1 = CharacterDetail;

exports.QueryConfig = QueryConfig;
exports.CharacterDetailQuery = CharacterDetailQuery;
exports.make = make$1;
/*  Not a pure module */
